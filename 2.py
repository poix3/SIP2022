{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from skimage.io import imread\n",
    "from skimage import exposure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cumulative_histogram(hist):\n",
    "  cumsum_hist = np.cumsum(hist)/np.sum(hist)\n",
    "  return cumsum_hist\n",
    "\n",
    "def test2_1():\n",
    "  img = imread('pout.tif')\n",
    "  hist, bins = np.histogram(img.ravel(),256,[0,256])\n",
    "  cumsum_hist = cumulative_histogram(hist)\n",
    "  # print(img.shape)\n",
    "  fig, axs = plt.subplots(1, 2, figsize=(8, 4))\n",
    "  axs[0].imshow(img, cmap=\"gray\", vmax=255, vmin=0)\n",
    "  axs[0].axis('off')\n",
    "  axs[0].set_title(\"Original image\")\n",
    "  \n",
    "  axs[1].plot(cumsum_hist)\n",
    "  # axs[1].hist(np.array(img).flatten(), bins=bins, density=True)\n",
    "  axs[1].set_title('CDF for the image \\'pout.tif\\'')\n",
    "  axs[1].set_xlabel('Intensity value')\n",
    "  axs[1].set_ylabel('Fraction of pixels')\n",
    "  fig.savefig('2.1.png') \n",
    "  fig.show()\n",
    "\n",
    "\n",
    "# test2_1()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def CDF_map(intensity, CDF):\n",
    "    return CDF[intensity]\n",
    "\n",
    "def Image_to_CDFimage(img, CDF):\n",
    "    CDFimage = CDF_map(img, CDF) \n",
    "    return CDFimage\n",
    "\n",
    "def test2_2():\n",
    "  img = imread('pout.tif')\n",
    "  hist, bins = np.histogram(img.ravel(),256,[0,256])\n",
    "  cumsum_hist = cumulative_histogram(hist)\n",
    "\n",
    "  newImg = Image_to_CDFimage(img, cumsum_hist)\n",
    "\n",
    "  fig, axs = plt.subplots(1, 2, figsize=(8, 4))\n",
    "\n",
    "  axs[0].imshow(img, cmap=\"gray\", vmax=255, vmin=0)\n",
    "  axs[0].set_title(\"Original image\")\n",
    "  axs[1].imshow(newImg * 255, cmap=\"gray\", vmax=255, vmin=0)\n",
    "  axs[1].set_title(\"Floating Point image\")  \n",
    "  \n",
    "  fig.show()\n",
    "  fig.savefig('2.2.png')\n",
    "\n",
    "  # plt.gray()  # show the filtered result in grayscale\n",
    "  # ax1 = fig.add_subplot(121)  # left side\n",
    "  # ax2 = fig.add_subplot(122)  # right side\n",
    "  # ax1.set_title('Original image')\n",
    "  # ax2.set_title('Floating-point image')\n",
    "  # ax1.imshow(img)\n",
    "  # ax2.imshow(newImg)\n",
    "  # # plt.title('mean filtering of salt & pepper')\n",
    "  # plt.savefig('2.2.png')\n",
    "  # plt.show()\n",
    "  # plt.close()\n",
    "\n",
    "  \n",
    "\n",
    "# test2_2()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def inverse_cdf(l, cdf):\n",
    "  subset  = np.take(range(256), np.where(cdf >= l))\n",
    "  return np.min(subset)\n",
    "\n",
    "# def inverse_cdf(l, cdf):\n",
    "#   result  = np.argmin(np.where(cdf >= l, cdf, 1))\n",
    "#   return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def histogram_matching(original_img, target_img):  \n",
    "  orignal_hist, _ = np.histogram(original_img.ravel(),256,[0,256])\n",
    "  target_hist, _ = np.histogram(target_img.ravel(),256,[0,256])\n",
    "\n",
    "  original_CDF = cumulative_histogram(orignal_hist)\n",
    "  target_CDF = cumulative_histogram(target_hist)\n",
    "  original_CDFimg = Image_to_CDFimage(original_img, original_CDF)\n",
    "\n",
    "  (X,Y) = original_img.shape\n",
    "  output_img = np.zeros((X,Y))\n",
    "  for x in range(0,X):\n",
    "    for y in range(0,Y):\n",
    "      output_img[x,y] = inverse_cdf(original_CDFimg[x,y], target_CDF)\n",
    "  return output_img  \n",
    "\n",
    "def test2_4():\n",
    "  img1 = imread('pout.tif')\n",
    "  img2 = imread('coins.png')\n",
    "  \n",
    "  img1_hist, _ = np.histogram(img1.ravel(),256,[0,256])\n",
    "  img2_hist, _ = np.histogram(img2.ravel(),256,[0,256])\n",
    "  img1_CDF = cumulative_histogram(img1_hist)\n",
    "  img2_CDF = cumulative_histogram(img2_hist)\n",
    "\n",
    "  newImg = histogram_matching(img1, img2)\n",
    "  newImg_hist, _ = np.histogram(newImg.ravel(),256,[0,256])\n",
    "  newImg_CDF = cumulative_histogram(newImg_hist)\n",
    "\n",
    "  fig, axs = plt.subplots(2, 3, figsize=(15, 10))\n",
    "\n",
    "  axs[0, 0].imshow(img1, cmap='gray', vmax=255, vmin=0)\n",
    "  axs[0, 0].axis('off')\n",
    "  axs[0, 0].set_title('Original image')\n",
    "  axs[0, 1].imshow(img2, cmap=\"gray\", vmax=255, vmin=0)\n",
    "  axs[0, 1].axis('off')\n",
    "  axs[0, 1].set_title('Target image')\n",
    "  axs[0, 2].imshow(newImg, cmap='gray', vmax=255, vmin=0)\n",
    "  axs[0, 2].axis('off')\n",
    "  axs[0, 2].set_title('New image after histogram matching')\n",
    "\n",
    "  axs[1, 0].plot(img1_CDF)\n",
    "  axs[1, 0].set_title('CDF for the original image')\n",
    "  axs[1, 0].set_xlabel('Intensity')\n",
    "  axs[1, 0].set_ylabel('Fraction of pixels')\n",
    "\n",
    "  axs[1, 1].plot(img2_CDF)\n",
    "  axs[1, 1].set_title('CDF for the target image')\n",
    "  axs[1, 1].set_xlabel('Intensity')\n",
    "  axs[1, 1].set_ylabel('Fraction of pixels')\n",
    "\n",
    "  axs[1, 2].plot(newImg_CDF)\n",
    "  axs[1, 2].set_title('CDF for the new image')\n",
    "  axs[1, 2].set_xlabel('Intensity')\n",
    "  axs[1, 2].set_ylabel('Fraction of pixels')\n",
    "  fig.savefig('2.4.png') \n",
    "  fig.show()\n",
    "\n",
    "# test2_4()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def histogram_equalization(img):\n",
    "    target_img = np.arange(0, 256)\n",
    "    new_img = histogram_matching(img, target_img)\n",
    "    return new_img\n",
    "\n",
    "def test2_5():\n",
    "    img = imread('pout.tif')\n",
    "    equilized_img = histogram_equalization(img)\n",
    "    equilized_img_by_ski = exposure.equalize_hist(img)\n",
    "\n",
    "    img_hist, _ = np.histogram(img.ravel(),256,[0,256])\n",
    "    equilized_img_hist, _ = np.histogram(equilized_img.ravel(),256,[0,256])\n",
    "    \n",
    "    img_CDF = cumulative_histogram(img_hist)\n",
    "    equilized_img_CDF = cumulative_histogram(equilized_img_hist)\n",
    "    equilized_img_by_ski_CDF, _ = exposure.cumulative_distribution(equilized_img_by_ski)\n",
    "\n",
    "    fig, axs = plt.subplots(2, 3, figsize=(15, 10))\n",
    "\n",
    "    axs[0, 0].imshow(img, cmap='gray', vmax=255, vmin=0)\n",
    "    axs[0, 0].axis('off')\n",
    "    axs[0, 0].set_title('Original image')\n",
    "\n",
    "    axs[0, 1].imshow(equilized_img, cmap=\"gray\", vmax=255, vmin=0)\n",
    "    axs[0, 1].axis('off')\n",
    "    axs[0, 1].set_title('Equilized image')\n",
    "\n",
    "    axs[0, 2].imshow(equilized_img_by_ski*255, cmap='gray', vmax=255, vmin=0)\n",
    "    axs[0, 2].axis('off')\n",
    "    axs[0, 2].set_title('Image Equilized by Skimage')\n",
    "\n",
    "    axs[1, 0].plot(img_CDF)\n",
    "    axs[1, 0].set_title('CDF for the original image')\n",
    "    axs[1, 0].set_xlabel('Intensity')\n",
    "    axs[1, 0].set_ylabel('Fraction of pixels')\n",
    "\n",
    "    axs[1, 1].plot(equilized_img_CDF)\n",
    "    axs[1, 1].set_title('CDF for the equilized image')\n",
    "    axs[1, 1].set_xlabel('Intensity')\n",
    "    axs[1, 1].set_ylabel('Fraction of pixels')\n",
    "\n",
    "    axs[1, 2].plot(equilized_img_by_ski_CDF)\n",
    "    axs[1, 2].set_title('CDF for the image Equilized by Skimage')\n",
    "    axs[1, 2].set_xlabel('Intensity')\n",
    "    axs[1, 2].set_ylabel('Fraction of pixels')\n",
    "    fig.savefig('2.5.png') \n",
    "    fig.show()\n",
    "\n",
    "# test2_5()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "b03302110f19ef7a3440f0fec28c909174d22b44d2ce2cdfd5e55f6b62b00aec"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
